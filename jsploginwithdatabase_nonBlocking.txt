Create simple Servlet application to demonstrate Non-Blocking Read
Operation.

Servlet (NonBlockingReadServlet.java):
java
Copy code
import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.AsyncContext;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@WebServlet(urlPatterns = "/NonBlockingReadServlet", asyncSupported = true)
public class NonBlockingReadServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;

    protected void doGet(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        
        // Set the content type and get the PrintWriter
        response.setContentType("text/html;charset=UTF-8");
        PrintWriter out = response.getWriter();

        out.println("<html><head><title>Non-Blocking Read</title></head><body>");
        out.println("<h2>Non-Blocking Read</h2>");

        // Start asynchronous processing
        AsyncContext asyncContext = request.startAsync();

        // Set a timeout for the asynchronous operation (e.g., 10 seconds)
        asyncContext.setTimeout(10000);

        // Perform non-blocking read operation in a separate thread
        NonBlockingReadTask readTask = new NonBlockingReadTask(asyncContext);
        new Thread(readTask).start();

        out.println("<p>Request processing is non-blocking. You can continue doing other things.</p>");
        out.println("</body></html>");

        // Complete the response
        asyncContext.complete();
    }
}
Non-blocking Read Task (NonBlockingReadTask.java):
java
Copy code
import java.io.PrintWriter;

import javax.servlet.AsyncContext;

public class NonBlockingReadTask implements Runnable {

    private final AsyncContext asyncContext;

    public NonBlockingReadTask(AsyncContext asyncContext) {
        this.asyncContext = asyncContext;
    }

    @Override
    public void run() {
        try {
            // Simulate a time-consuming non-blocking read operation
            Thread.sleep(5000);

            // Retrieve the PrintWriter from the original request
            PrintWriter out = asyncContext.getResponse().getWriter();

            // Write the response after the non-blocking read operation
            out.println("<p>Non-blocking read operation completed. Response sent after 5 seconds.</p>");
        } catch (InterruptedException e) {
            e.printStackTrace();
        } finally {
            // Complete the asynchronous context
            asyncContext.complete();
        }
    }
}

===========================

Develop a JSP application to authenticate user login with database. 

Database Configuration:
Create a MySQL database named user_authentication and a table named users with columns id (auto-incremented), username, and password.

sql
Copy code
CREATE DATABASE IF NOT EXISTS user_authentication;

USE user_authentication;

CREATE TABLE IF NOT EXISTS users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL
);

INSERT INTO users (username, password) VALUES ('user1', 'password1');
INSERT INTO users (username, password) VALUES ('user2', 'password2');
JSP (login.jsp):
jsp
Copy code
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Login Page</title>
</head>
<body>
    <h2>Login Page</h2>

    <%-- Display error message if authentication fails --%>
    <%
        String errorMessage = (String)request.getAttribute("errorMessage");
        if (errorMessage != null) {
    %>
            <p style="color: red;"><%= errorMessage %></p>
    <%
        }
    %>

    <form action="LoginServlet" method="post">
        Username: <input type="text" name="username" required><br>
        Password: <input type="password" name="password" required><br>
        <input type="submit" value="Login">
    </form>
</body>
</html>
Servlet (LoginServlet.java):
java
Copy code
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@WebServlet("/LoginServlet")
public class LoginServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;

    protected void doPost(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {

        // Retrieve user credentials from the request parameters
        String username = request.getParameter("username");
        String password = request.getParameter("password");

        // Database connection parameters
        String jdbcUrl = "jdbc:mysql://localhost:3306/user_authentication";
        String jdbcUser = "your_username";
        String jdbcPassword = "your_password";

        try {
            // Load the JDBC driver
            Class.forName("com.mysql.cj.jdbc.Driver");

            // Establish a connection
            try (Connection connection = DriverManager.getConnection(jdbcUrl, jdbcUser, jdbcPassword)) {

                // SQL query to check user credentials
                String sql = "SELECT * FROM users WHERE username = ? AND password = ?";
                
                // Create a PreparedStatement
                try (PreparedStatement statement = connection.prepareStatement(sql)) {
                    // Set values for placeholders in the SQL query
                    statement.setString(1, username);
                    statement.setString(2, password);

                    // Execute the query
                    try (ResultSet resultSet = statement.executeQuery()) {
                        if (resultSet.next()) {
                            // Authentication successful
                            response.sendRedirect("welcome.jsp");
                        } else {
                            // Authentication failed
                            request.setAttribute("errorMessage", "Invalid username or password");
                            request.getRequestDispatcher("login.jsp").forward(request, response);
                        }
                    }
                }
            }
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
            response.getWriter().println("Error: " + e.getMessage());
        }
    }
}
JSP (welcome.jsp):
jsp
Copy code
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Welcome Page</title>
</head>
<body>
    <h2>Welcome Page</h2>
    <p>Welcome, <%= request.getParameter("username") %>!</p>
</body>
</html>
Make sure to replace "your_username" and "your_password" with your actual MySQL database username and password in the LoginServlet.java file. Also, adjust the JDBC URL if needed.